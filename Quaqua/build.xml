<?xml version="1.0" encoding="UTF-8"?>
<project name="quaqua-jfc" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

    <target name="init">
        <!--
            Prerequisites for building the Quaqua look and feel:

            - Building can only be performed on Mac OS X 10.6 or Mac OS X 10.7

            - MacOSX10.7sdk, MacOSX10.6sdk, MacOSX10.5.sdk must be installed in
              /Developer/SDKs

            - The Mac OS X 10.5 /System folder must be accessible in the path
              /Users/Shared/Developer/Mac OS X 10.5/System
              If you don't have the OS X 10.5 /System folder you can only build
              Quaqua for OS X 10.6 and 10.7.

            - If you build on Mac OS X 10.7, Xcode 3 must be installed in
              /Developers-old.
              If you don't have Xcode3, you can build Quaqua only for Intel Macs.
              To do this, remove the -arch PPC and -arch PPC64 options in the
              "jnilib-32" target and the "jnilib-64" target.

            If all prerequisites are fulfilled, you can build Quaqua using
            the "release" target.

            -->

        <!-- You can set up any variables you want used throughout the script here. -->
        <property name="author" value="Werner Randelshofer"/>
        <property name="version" value="22.11"/>
        <property name="lib" value="lib"/>
        <property name="src" value="src"/>
        <property name="builddir" value="build/classes"/>
        <property name="distdir" value="dist"/>
    	<property name="dist" value="dist"/>
        <property name="docdir" value="${distdir}/javadoc"/>
        <property name="classpath" value="${builddir}"/>
     
    	
    	
     
        <!-- Compilation properties -->
        <!-- ====================== -->
        <property name="debug" value="true"/>

    	<mkdir dir="${builddir}"/>
    	<mkdir dir="${lib}"/>
    	
    	<path id="compile.classpath">
    		    <fileset dir="${lib}" includes="**/*.jar"/>
    	</path>

    </target>

    <target name="compile" depends="init,ivy-retrieve" >
    	
    	
    	
    	<javac 
    					debug="${debug}" deprecation="true"
    	                destdir="${builddir}" optimize="true"
    	                srcdir="${src}"
    	                source="11" target="11" encoding="UTF-8"
    	                includeantruntime="no"
    	            >
    				<classpath refid="compile.classpath"/>
    	            <include name="**/QuaquaPantherFileChooserLAF.java"/>
    	            <include name="**/QuaquaLeopardFileChooserLAF.java"/>
    	            <include name="**/Quaqua16LionFileChooserLAF.java"/>
    	            <include name="**/QuaquaMavericksFileChooserLAF.java"/>
    	            <include name="**/QuaquaLookAndFeel.java"/>
    	            <include name="**/QuaquaBrowserUI.java"/>
    	            <include name="**/QuaquaFileChooserBrowserListUI.java"/>
    	            <include name="**/DefaultBrowserCellRenderer.java"/>
    	            <include name="**/QuaquaTreeUI.java"/>
    	            <include name="**/QuaquaPanelUI.java"/>
    	            <include name="**/QuaquaPantherFileChooserUI.java"/>
    	            <include name="**/QuaquaLeopardFileChooserUI.java"/>
    	            <include name="**/QuaquaLionFileChooserUI.java"/>
    	            <include name="**/QuaquaMavericksFileChooserUI.java"/>
    	            <include name="**/QuaquaJaguarFileChooserUI.java"/>
    	            <include name="**/filechooser/*FileSystemView.java"/>
    	            <include name="**/QuaquaIconFactory.java"/>
    	            <include name="**/QuaquaLeopardSideBarSelectionBorder.java"/>
    	            <include name="**/QuaquaLionSideBarSelectionBorder.java"/>
    	            <include name="**/QuaquaNativeButtonBorder.java"/>
    	            <include name="**/QuaquaTextFieldFocusHandler.java"/>
    	            <include name="de/sciss/treetable/**"/>
    	            <exclude name="**/*15*.java"/>
    	        </javac>
    	        <copy todir="${builddir}">
    	            <fileset dir="${src}">
    	                <include name="**/*.properties"/>
    	                <include name="**/Browser*.png"/>
    	                <include name="**/FileChooser.*.png"/>
    	                <include name="**/FileView.*.png"/>
    	                <include name="**/GroupBox*.png"/>
    	                <include name="**/Tree.*.png"/>
    	                <include name="**/*.txt"/>
    	            </fileset>
    	        </copy>
    		<echo file="${builddir}/ch/randelshofer/quaqua/version.txt" message="${version}"/>
     </target>
    
    

    <target name="jar" depends="compile">
        
        <jar basedir="${builddir}" compress="true"
            jarfile="${distdir}/${ant.project.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="ch.randelshofer.quaqua.QuaquaManager"/>
            </manifest>
            <exclude name="**/Icon?"/>
            <exclude name="**/.*"/>
            <exclude name="org/jdesktop/**"/>
        </jar>
    </target>
    

   <target name="release" depends="jar,javadoc"
        description="Build a release." >
        <delete>
            <fileset defaultexcludes="false" dir="${src}">
                <include name="**/*.class"/>
                <include name="**/*.java~"/>
            </fileset>
        </delete>
        <zip destfile="${distdir}/quaqua-${versionNumber}.zip" compress="false">
            <fileset dir="..">
                <include name="Quaqua/**"/>
                <exclude name="Quaqua/dist/Quaqua/**"/>
                <exclude name="Quaqua/dist/signed/**"/>
                <exclude name="Quaqua/dist/*.zip"/>
                <exclude name="Quaqua/build/**"/>
                <exclude name="Quaqua/nbproject/private/**"/>
                <exclude name="**/.*"/>
            </fileset>
        </zip>
        <zip destfile="${distdir}/quaqua-${versionNumber}.nested.zip" compress="true">
            <fileset dir="${distdir}">
                <include name="quaqua-${versionNumber}.zip"/>
            </fileset>
        </zip>
    </target>

    <target name="javadoc" depends="init" description="Javadoc for my API." >
        <mkdir dir="${docdir}"/>
        <javadoc destdir="${docdir}" footer="&lt;font size=-2>Copyright 2003-2007 (c) Werner Randelshofer.&lt;br>All rights reserved.&lt;/font>"
        header="Quaqua ${version}" encoding="UTF-8"
        windowtitle="Quaqua ${version}"
        maxmemory="256M">
            <sourcepath>
                <pathelement location="${src}"/>
            </sourcepath>
            <excludepackage name="test"/>
            <excludepackage name="qtest"/>
            <excludepackage name="bugs"/>
            <packageset dir="${src}">
                <include name="ch/randelshofer/**"/>
            </packageset>
        </javadoc>
    </target>

    <target name="clean" depends="init" description="Clean all build products." >
        <delete dir="${builddir}"/>
        <!--
        <delete>
            <fileset dir="${builddir}">
                <include name="**/*.class"/>
            </fileset>
        </delete>
        -->
    </target>
	
	
	<target name="ivy-init" depends="init">
		<ivy:resolve/>
		<ivy:deliver 
			conf="*(public)"
			deliverpattern="${dist}/[artifact].[ext]"/> 
	</target>
		
	
	<target name="ivy-test" description="Test ivy installation">
		     <ivy:settings />
	</target>
		
	<target name="ivy-resolve" depends="ivy-init" description="resolve dependencies with ivy">
	  	<ivy:resolve />
	 </target>
		
	<target name="ivy-retrieve" depends="ivy-resolve" description="Resolve and Retrieve with ivy">
	  	<ivy:retrieve sync="true" type="jar" pattern="${lib}/[organization]-[artifact](-[classifier]).[ext]" />
	</target>
	
	
	<target name="ivy-gen-pom" depends="ivy-init">
		<ivy:makepom ivyfile="${dist}/ivy.xml" pomfile="${dist}/${ant.project.name}.pom">
	    <!--
	      Mapping confs to scopes is important, otherwise
	      unmapped confs are included as optional. If you
	      have private confs, the best option seems to
	      be marking them as provided or system. See
	      IVY-1201 for an ehancement request.
	    -->
	    <mapping conf="default" scope="compile"/>
	  </ivy:makepom>
	</target>
	
	<target name="publish" description="Publish jar" depends="ivy-gen-pom,jar">
    	<ivy:publish 
    		pubrevision="${version}"
    		resolver="local" 
    		overwrite="true"
    	    artifactspattern="${dist}/[artifact].[ext]"/>
    </target>
	
	
</project>
